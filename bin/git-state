#!/bin/bash -e

if [ -n "$DEBUG" ] ;then
  set -x
fi

if [ -n "$MOCK" ] ;then
  envman () {
    echo $@
  }
fi

# with too many tags github pukes on transfer limits
# bump the value as needed by creating a config file

#mkdir -p ~/.envman
#echo -e '{"env_bytes_limit_in_kb": 30}' > ~/.envman/configs.json


# export commit info

cache="${BITRISE_CACHE_DIR:-.}/latest"
current=$(git rev-parse --verify origin/master)

if [ -f "$cache" ] ;then
  latest=$(cat $cache)
fi

if [ "$current" != "$latest" ] ;then
  export GIT_LATEST_COMMIT=$current
  envman add --key SKIP_BUILD --value ""
else
  export GIT_LATEST_COMMIT=$latest
  envman add --key SKIP_BUILD --value "skip"
fi

echo "$GIT_LATEST_COMMIT" > "$cache"
envman add --key GIT_LATEST_COMMIT --value "$GIT_LATEST_COMMIT"


# export tag info

git fetch --tags
export GIT_CURRENT_TAG=$(git describe --tags --abbrev=0)
envman add --key GIT_CURRENT_TAG --value $GIT_CURRENT_TAG

if [[ $GIT_CURRENT_TAG =~ "rc" ]] ;then
  version=$GIT_CURRENT_TAG
else
  version="${GIT_CURRENT_TAG}-rc"
fi

IFS='.' read -ra semver <<< ${version%"-rc"*}
count=0
for x in ${semver[@]} ;do
  count=$((count+1))
  if [ -n "$BUMP_MAJOR" ] ;then
    major=${x#v}
    update="v$((major+1)).0.0"
    break
  fi
  if [ -n "$BUMP_MINOR" ] && (($count == 2)) ;then
    update="${update}.$((x+1)).0"
    break
  fi
  if (($count == 3)) && [ "$GIT_CURRENT_TAG" != "$version" ] ;then
    # bump patch level; 1st release candidate
    bump=$((x+1))
  fi
  if [ -n "$update" ] ;then
    if [ -n "$bump" ] ;then
      update="${update}.${bump}"
    else
      update="${update}.${x}"
    fi
  else
    if [ -n "$bump" ] ;then
      update=$bump
    else
      update=$x
    fi
  fi
done

if [ -n "$RELEASE" ] ;then
  # release workflow
  export GIT_UPDATE_TAG="${update}"
else
  # deploy workflow
  candidate=${version#*"rc"}
  if [[ $candidate > 0 ]] && [ -z "$BUMP_MAJOR" ] && [ -z "$BUMP_MINOR" ] ;then
    iteration=$(($candidate+1))
  else
    iteration=1
  fi
  export GIT_UPDATE_TAG="${update}-rc${iteration}"
fi

envman add --key GIT_UPDATE_TAG --value $GIT_UPDATE_TAG

